/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package esa.mo.nmf.apps;

import esa.mo.nmf.NMFException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.ccsds.moims.mo.mal.MALException;
import org.ccsds.moims.mo.mal.MALInteractionException;
import org.ccsds.moims.mo.mal.provider.MALInteraction;
import org.ccsds.moims.mo.mal.structures.Identifier;
import org.ccsds.moims.mo.mal.structures.UInteger;
import org.ccsds.moims.mo.mc.structures.AttributeValueList;
import org.ccsds.moims.mo.platform.gps.body.GetLastKnownPositionResponse;
import org.ccsds.moims.mo.platform.gps.consumer.GPSAdapter;
import org.orekit.bodies.GeodeticPoint;

/**
 * This class is used to obtain the current GPS location of the satellite.
 * @author Nora Silven
 */
public class MalwareAttackGPSHandler extends GPSAdapter {

    private static final Logger LOGGER = Logger.getLogger(MalwareAttackGPSHandler.class.getName());
    private final MalwareAttackMCAdapter MCAdapter;

    
    /**
     * Initialize the connection to the app through the adapter.
     * @param MCAdapter the adapter to the app
     */
    public MalwareAttackGPSHandler(MalwareAttackMCAdapter MCAdapter) {
        this.MCAdapter = MCAdapter;
    }
    

    public UInteger actionArrived(Identifier name, AttributeValueList attributeValues, Long actionInstanceObjId,
        boolean reportProgress, MALInteraction interaction) {
        return new UInteger(0); // error code 0 - unknown error
    }

    
    /**
     * Gets the current geographical position of the Satellite (longitude, latitude, altitude)
     * @return the current position
     */
    public GetLastKnownPositionResponse getCurrentPosition() {
        GetLastKnownPositionResponse pos;
        try {
            MCAdapter.getConnector().getPlatformServices().getGPSService().getPosition(this);
            pos = MCAdapter.getConnector().getPlatformServices().getGPSService().getLastKnownPosition();
            return pos;

        } catch (NMFException | IOException | MALInteractionException | MALException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
        }
        return null;
    }
}
